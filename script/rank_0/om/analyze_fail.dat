# 1.This file shows the parsed IR info when graph evaluating failed to help find the problem.
# 2.You can search the last `------------------------>` to the node which is inferred failed.
# 3.Refer to https://www.mindspore.cn/search?inputValue=analyze_fail.dat to get more instructions.
# ===============================================================================

# [No.1] construct_wrapper.1
# In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(680)/    def construct(self, data, label):/
funcgraph fg_1(
        %para1 : Tensor(F32)[16, 3, 64, 224, 224]    # data
        , %para2 : Tensor(I64)[16]    # label
        , %para3 : Ref[Tensor(F32)][400]    # head.logits.features.0.bias
        , %para4 : Ref[Tensor(F32)][400, 1024, 1, 1, 1]    # head.logits.features.0.weight
        , %para5 : Ref[Tensor(F32)][384, 832, 1, 1, 1]    # backbone.mixed_5c.b0.features.0.weight
        , %para6 : Ref[Tensor(F32)][384, 192, 3, 3, 3]    # backbone.mixed_5c.b1b.features.0.weight
        , %para7 : Ref[Tensor(F32)][128, 48, 3, 3, 3]    # backbone.mixed_5c.b2b.features.0.weight
        , %para8 : Ref[Tensor(F32)][128, 832, 1, 1, 1]    # backbone.mixed_5c.b3b.features.0.weight
        , %para9 : Ref[Tensor(F32)][192, 832, 1, 1, 1]    # backbone.mixed_5c.b1a.features.0.weight
        , %para10 : Ref[Tensor(F32)][48, 832, 1, 1, 1]    # backbone.mixed_5c.b2a.features.0.weight
        , %para11 : Ref[Tensor(F32)][256, 832, 1, 1, 1]    # backbone.mixed_5b.b0.features.0.weight
        , %para12 : Ref[Tensor(F32)][320, 160, 3, 3, 3]    # backbone.mixed_5b.b1b.features.0.weight
        , %para13 : Ref[Tensor(F32)][128, 32, 3, 3, 3]    # backbone.mixed_5b.b2b.features.0.weight
        , %para14 : Ref[Tensor(F32)][128, 832, 1, 1, 1]    # backbone.mixed_5b.b3b.features.0.weight
        , %para15 : Ref[Tensor(F32)][160, 832, 1, 1, 1]    # backbone.mixed_5b.b1a.features.0.weight
        , %para16 : Ref[Tensor(F32)][32, 832, 1, 1, 1]    # backbone.mixed_5b.b2a.features.0.weight
        , %para17 : Ref[Tensor(F32)][256, 528, 1, 1, 1]    # backbone.mixed_4f.b0.features.0.weight
        , %para18 : Ref[Tensor(F32)][320, 160, 3, 3, 3]    # backbone.mixed_4f.b1b.features.0.weight
        , %para19 : Ref[Tensor(F32)][128, 32, 3, 3, 3]    # backbone.mixed_4f.b2b.features.0.weight
        , %para20 : Ref[Tensor(F32)][128, 528, 1, 1, 1]    # backbone.mixed_4f.b3b.features.0.weight
        , %para21 : Ref[Tensor(F32)][160, 528, 1, 1, 1]    # backbone.mixed_4f.b1a.features.0.weight
        , %para22 : Ref[Tensor(F32)][32, 528, 1, 1, 1]    # backbone.mixed_4f.b2a.features.0.weight
        , %para23 : Ref[Tensor(F32)][112, 512, 1, 1, 1]    # backbone.mixed_4e.b0.features.0.weight
        , %para24 : Ref[Tensor(F32)][288, 144, 3, 3, 3]    # backbone.mixed_4e.b1b.features.0.weight
        , %para25 : Ref[Tensor(F32)][64, 32, 3, 3, 3]    # backbone.mixed_4e.b2b.features.0.weight
        , %para26 : Ref[Tensor(F32)][64, 512, 1, 1, 1]    # backbone.mixed_4e.b3b.features.0.weight
        , %para27 : Ref[Tensor(F32)][144, 512, 1, 1, 1]    # backbone.mixed_4e.b1a.features.0.weight
        , %para28 : Ref[Tensor(F32)][32, 512, 1, 1, 1]    # backbone.mixed_4e.b2a.features.0.weight
        , %para29 : Ref[Tensor(F32)][128, 512, 1, 1, 1]    # backbone.mixed_4d.b0.features.0.weight
        , %para30 : Ref[Tensor(F32)][256, 128, 3, 3, 3]    # backbone.mixed_4d.b1b.features.0.weight
        , %para31 : Ref[Tensor(F32)][64, 24, 3, 3, 3]    # backbone.mixed_4d.b2b.features.0.weight
        , %para32 : Ref[Tensor(F32)][64, 512, 1, 1, 1]    # backbone.mixed_4d.b3b.features.0.weight
        , %para33 : Ref[Tensor(F32)][128, 512, 1, 1, 1]    # backbone.mixed_4d.b1a.features.0.weight
        , %para34 : Ref[Tensor(F32)][24, 512, 1, 1, 1]    # backbone.mixed_4d.b2a.features.0.weight
        , %para35 : Ref[Tensor(F32)][160, 512, 1, 1, 1]    # backbone.mixed_4c.b0.features.0.weight
        , %para36 : Ref[Tensor(F32)][224, 112, 3, 3, 3]    # backbone.mixed_4c.b1b.features.0.weight
        , %para37 : Ref[Tensor(F32)][64, 24, 3, 3, 3]    # backbone.mixed_4c.b2b.features.0.weight
        , %para38 : Ref[Tensor(F32)][64, 512, 1, 1, 1]    # backbone.mixed_4c.b3b.features.0.weight
        , %para39 : Ref[Tensor(F32)][384]    # backbone.mixed_5c.b0.features.1.bn2d.gamma
        , %para40 : Ref[Tensor(F32)][384]    # backbone.mixed_5c.b0.features.1.bn2d.beta
        , %para41 : Ref[Tensor(F32)][384]    # backbone.mixed_5c.b0.features.1.bn2d.moving_mean
        , %para42 : Ref[Tensor(F32)][384]    # backbone.mixed_5c.b0.features.1.bn2d.moving_variance
        , %para43 : Ref[Tensor(F32)][384]    # backbone.mixed_5c.b1b.features.1.bn2d.gamma
        , %para44 : Ref[Tensor(F32)][384]    # backbone.mixed_5c.b1b.features.1.bn2d.beta
        , %para45 : Ref[Tensor(F32)][384]    # backbone.mixed_5c.b1b.features.1.bn2d.moving_mean
        , %para46 : Ref[Tensor(F32)][384]    # backbone.mixed_5c.b1b.features.1.bn2d.moving_variance
        , %para47 : Ref[Tensor(F32)][128]    # backbone.mixed_5c.b2b.features.1.bn2d.gamma
        , %para48 : Ref[Tensor(F32)][128]    # backbone.mixed_5c.b2b.features.1.bn2d.beta
        , %para49 : Ref[Tensor(F32)][128]    # backbone.mixed_5c.b2b.features.1.bn2d.moving_mean
        , %para50 : Ref[Tensor(F32)][128]    # backbone.mixed_5c.b2b.features.1.bn2d.moving_variance
        , %para51 : Ref[Tensor(F32)][128]    # backbone.mixed_5c.b3b.features.1.bn2d.gamma
        , %para52 : Ref[Tensor(F32)][128]    # backbone.mixed_5c.b3b.features.1.bn2d.beta
        , %para53 : Ref[Tensor(F32)][128]    # backbone.mixed_5c.b3b.features.1.bn2d.moving_mean
        , %para54 : Ref[Tensor(F32)][128]    # backbone.mixed_5c.b3b.features.1.bn2d.moving_variance
        , %para55 : Ref[Tensor(F32)][112, 512, 1, 1, 1]    # backbone.mixed_4c.b1a.features.0.weight
        , %para56 : Ref[Tensor(F32)][24, 512, 1, 1, 1]    # backbone.mixed_4c.b2a.features.0.weight
        , %para57 : Ref[Tensor(F32)][192, 480, 1, 1, 1]    # backbone.mixed_4b.b0.features.0.weight
        , %para58 : Ref[Tensor(F32)][208, 96, 3, 3, 3]    # backbone.mixed_4b.b1b.features.0.weight
        , %para59 : Ref[Tensor(F32)][48, 16, 3, 3, 3]    # backbone.mixed_4b.b2b.features.0.weight
        , %para60 : Ref[Tensor(F32)][64, 480, 1, 1, 1]    # backbone.mixed_4b.b3b.features.0.weight
        , %para61 : Ref[Tensor(F32)][192]    # backbone.mixed_5c.b1a.features.1.bn2d.gamma
        , %para62 : Ref[Tensor(F32)][192]    # backbone.mixed_5c.b1a.features.1.bn2d.beta
        , %para63 : Ref[Tensor(F32)][192]    # backbone.mixed_5c.b1a.features.1.bn2d.moving_mean
        , %para64 : Ref[Tensor(F32)][192]    # backbone.mixed_5c.b1a.features.1.bn2d.moving_variance
        , %para65 : Ref[Tensor(F32)][48]    # backbone.mixed_5c.b2a.features.1.bn2d.gamma
        , %para66 : Ref[Tensor(F32)][48]    # backbone.mixed_5c.b2a.features.1.bn2d.beta
        , %para67 : Ref[Tensor(F32)][48]    # backbone.mixed_5c.b2a.features.1.bn2d.moving_mean
        , %para68 : Ref[Tensor(F32)][48]    # backbone.mixed_5c.b2a.features.1.bn2d.moving_variance
        , %para69 : Ref[Tensor(F32)][256]    # backbone.mixed_5b.b0.features.1.bn2d.gamma
        , %para70 : Ref[Tensor(F32)][256]    # backbone.mixed_5b.b0.features.1.bn2d.beta
        , %para71 : Ref[Tensor(F32)][256]    # backbone.mixed_5b.b0.features.1.bn2d.moving_mean
        , %para72 : Ref[Tensor(F32)][256]    # backbone.mixed_5b.b0.features.1.bn2d.moving_variance
        , %para73 : Ref[Tensor(F32)][320]    # backbone.mixed_5b.b1b.features.1.bn2d.gamma
        , %para74 : Ref[Tensor(F32)][320]    # backbone.mixed_5b.b1b.features.1.bn2d.beta
        , %para75 : Ref[Tensor(F32)][320]    # backbone.mixed_5b.b1b.features.1.bn2d.moving_mean
        , %para76 : Ref[Tensor(F32)][320]    # backbone.mixed_5b.b1b.features.1.bn2d.moving_variance
        , %para77 : Ref[Tensor(F32)][128]    # backbone.mixed_5b.b2b.features.1.bn2d.gamma
        , %para78 : Ref[Tensor(F32)][128]    # backbone.mixed_5b.b2b.features.1.bn2d.beta
        , %para79 : Ref[Tensor(F32)][128]    # backbone.mixed_5b.b2b.features.1.bn2d.moving_mean
        , %para80 : Ref[Tensor(F32)][128]    # backbone.mixed_5b.b2b.features.1.bn2d.moving_variance
        , %para81 : Ref[Tensor(F32)][128]    # backbone.mixed_5b.b3b.features.1.bn2d.gamma
        , %para82 : Ref[Tensor(F32)][128]    # backbone.mixed_5b.b3b.features.1.bn2d.beta
        , %para83 : Ref[Tensor(F32)][128]    # backbone.mixed_5b.b3b.features.1.bn2d.moving_mean
        , %para84 : Ref[Tensor(F32)][128]    # backbone.mixed_5b.b3b.features.1.bn2d.moving_variance
        , %para85 : Ref[Tensor(F32)][96, 480, 1, 1, 1]    # backbone.mixed_4b.b1a.features.0.weight
        , %para86 : Ref[Tensor(F32)][16, 480, 1, 1, 1]    # backbone.mixed_4b.b2a.features.0.weight
        , %para87 : Ref[Tensor(F32)][192, 64, 3, 3, 3]    # backbone.conv3d_2c_3x3.features.0.weight
        , %para88 : Ref[Tensor(F32)][160]    # backbone.mixed_5b.b1a.features.1.bn2d.gamma
        , %para89 : Ref[Tensor(F32)][160]    # backbone.mixed_5b.b1a.features.1.bn2d.beta
        , %para90 : Ref[Tensor(F32)][160]    # backbone.mixed_5b.b1a.features.1.bn2d.moving_mean
        , %para91 : Ref[Tensor(F32)][160]    # backbone.mixed_5b.b1a.features.1.bn2d.moving_variance
        , %para92 : Ref[Tensor(F32)][32]    # backbone.mixed_5b.b2a.features.1.bn2d.gamma
        , %para93 : Ref[Tensor(F32)][32]    # backbone.mixed_5b.b2a.features.1.bn2d.beta
        , %para94 : Ref[Tensor(F32)][32]    # backbone.mixed_5b.b2a.features.1.bn2d.moving_mean
        , %para95 : Ref[Tensor(F32)][32]    # backbone.mixed_5b.b2a.features.1.bn2d.moving_variance
        , %para96 : Ref[Tensor(F32)][128, 256, 1, 1, 1]    # backbone.mixed_3c.b0.features.0.weight
        , %para97 : Ref[Tensor(F32)][192, 128, 3, 3, 3]    # backbone.mixed_3c.b1b.features.0.weight
        , %para98 : Ref[Tensor(F32)][96, 32, 3, 3, 3]    # backbone.mixed_3c.b2b.features.0.weight
        , %para99 : Ref[Tensor(F32)][64, 256, 1, 1, 1]    # backbone.mixed_3c.b3b.features.0.weight
        , %para100 : Ref[Tensor(F32)][64, 64, 1, 1, 1]    # backbone.conv3d_2b_1x1.features.0.weight
        , %para101 : Ref[Tensor(F32)][256]    # backbone.mixed_4f.b0.features.1.bn2d.gamma
        , %para102 : Ref[Tensor(F32)][256]    # backbone.mixed_4f.b0.features.1.bn2d.beta
        , %para103 : Ref[Tensor(F32)][256]    # backbone.mixed_4f.b0.features.1.bn2d.moving_mean
        , %para104 : Ref[Tensor(F32)][256]    # backbone.mixed_4f.b0.features.1.bn2d.moving_variance
        , %para105 : Ref[Tensor(F32)][320]    # backbone.mixed_4f.b1b.features.1.bn2d.gamma
        , %para106 : Ref[Tensor(F32)][320]    # backbone.mixed_4f.b1b.features.1.bn2d.beta
        , %para107 : Ref[Tensor(F32)][320]    # backbone.mixed_4f.b1b.features.1.bn2d.moving_mean
        , %para108 : Ref[Tensor(F32)][320]    # backbone.mixed_4f.b1b.features.1.bn2d.moving_variance
        , %para109 : Ref[Tensor(F32)][128]    # backbone.mixed_4f.b2b.features.1.bn2d.gamma
        , %para110 : Ref[Tensor(F32)][128]    # backbone.mixed_4f.b2b.features.1.bn2d.beta
        , %para111 : Ref[Tensor(F32)][128]    # backbone.mixed_4f.b2b.features.1.bn2d.moving_mean
        , %para112 : Ref[Tensor(F32)][128]    # backbone.mixed_4f.b2b.features.1.bn2d.moving_variance
        , %para113 : Ref[Tensor(F32)][128]    # backbone.mixed_4f.b3b.features.1.bn2d.gamma
        , %para114 : Ref[Tensor(F32)][128]    # backbone.mixed_4f.b3b.features.1.bn2d.beta
        , %para115 : Ref[Tensor(F32)][128]    # backbone.mixed_4f.b3b.features.1.bn2d.moving_mean
        , %para116 : Ref[Tensor(F32)][128]    # backbone.mixed_4f.b3b.features.1.bn2d.moving_variance
        , %para117 : Ref[Tensor(F32)][128, 256, 1, 1, 1]    # backbone.mixed_3c.b1a.features.0.weight
        , %para118 : Ref[Tensor(F32)][32, 256, 1, 1, 1]    # backbone.mixed_3c.b2a.features.0.weight
        , %para119 : Ref[Tensor(F32)][64, 192, 1, 1, 1]    # backbone.mixed_3b.b0.features.0.weight
        , %para120 : Ref[Tensor(F32)][128, 96, 3, 3, 3]    # backbone.mixed_3b.b1b.features.0.weight
        , %para121 : Ref[Tensor(F32)][32, 16, 3, 3, 3]    # backbone.mixed_3b.b2b.features.0.weight
        , %para122 : Ref[Tensor(F32)][32, 192, 1, 1, 1]    # backbone.mixed_3b.b3b.features.0.weight
        , %para123 : Ref[Tensor(F32)][160]    # backbone.mixed_4f.b1a.features.1.bn2d.gamma
        , %para124 : Ref[Tensor(F32)][160]    # backbone.mixed_4f.b1a.features.1.bn2d.beta
        , %para125 : Ref[Tensor(F32)][160]    # backbone.mixed_4f.b1a.features.1.bn2d.moving_mean
        , %para126 : Ref[Tensor(F32)][160]    # backbone.mixed_4f.b1a.features.1.bn2d.moving_variance
        , %para127 : Ref[Tensor(F32)][32]    # backbone.mixed_4f.b2a.features.1.bn2d.gamma
        , %para128 : Ref[Tensor(F32)][32]    # backbone.mixed_4f.b2a.features.1.bn2d.beta
        , %para129 : Ref[Tensor(F32)][32]    # backbone.mixed_4f.b2a.features.1.bn2d.moving_mean
        , %para130 : Ref[Tensor(F32)][32]    # backbone.mixed_4f.b2a.features.1.bn2d.moving_variance
        , %para131 : Ref[Tensor(F32)][112]    # backbone.mixed_4e.b0.features.1.bn2d.gamma
        , %para132 : Ref[Tensor(F32)][112]    # backbone.mixed_4e.b0.features.1.bn2d.beta
        , %para133 : Ref[Tensor(F32)][112]    # backbone.mixed_4e.b0.features.1.bn2d.moving_mean
        , %para134 : Ref[Tensor(F32)][112]    # backbone.mixed_4e.b0.features.1.bn2d.moving_variance
        , %para135 : Ref[Tensor(F32)][288]    # backbone.mixed_4e.b1b.features.1.bn2d.gamma
        , %para136 : Ref[Tensor(F32)][288]    # backbone.mixed_4e.b1b.features.1.bn2d.beta
        , %para137 : Ref[Tensor(F32)][288]    # backbone.mixed_4e.b1b.features.1.bn2d.moving_mean
        , %para138 : Ref[Tensor(F32)][288]    # backbone.mixed_4e.b1b.features.1.bn2d.moving_variance
        , %para139 : Ref[Tensor(F32)][64]    # backbone.mixed_4e.b2b.features.1.bn2d.gamma
        , %para140 : Ref[Tensor(F32)][64]    # backbone.mixed_4e.b2b.features.1.bn2d.beta
        , %para141 : Ref[Tensor(F32)][64]    # backbone.mixed_4e.b2b.features.1.bn2d.moving_mean
        , %para142 : Ref[Tensor(F32)][64]    # backbone.mixed_4e.b2b.features.1.bn2d.moving_variance
        , %para143 : Ref[Tensor(F32)][64]    # backbone.mixed_4e.b3b.features.1.bn2d.gamma
        , %para144 : Ref[Tensor(F32)][64]    # backbone.mixed_4e.b3b.features.1.bn2d.beta
        , %para145 : Ref[Tensor(F32)][64]    # backbone.mixed_4e.b3b.features.1.bn2d.moving_mean
        , %para146 : Ref[Tensor(F32)][64]    # backbone.mixed_4e.b3b.features.1.bn2d.moving_variance
        , %para147 : Ref[Tensor(F32)][96, 192, 1, 1, 1]    # backbone.mixed_3b.b1a.features.0.weight
        , %para148 : Ref[Tensor(F32)][16, 192, 1, 1, 1]    # backbone.mixed_3b.b2a.features.0.weight
        , %para149 : Ref[Tensor(F32)][64, 3, 7, 7, 7]    # backbone.conv3d_1a_7x7.features.0.weight
        , %para150 : Ref[Tensor(F32)][144]    # backbone.mixed_4e.b1a.features.1.bn2d.gamma
        , %para151 : Ref[Tensor(F32)][144]    # backbone.mixed_4e.b1a.features.1.bn2d.beta
        , %para152 : Ref[Tensor(F32)][144]    # backbone.mixed_4e.b1a.features.1.bn2d.moving_mean
        , %para153 : Ref[Tensor(F32)][144]    # backbone.mixed_4e.b1a.features.1.bn2d.moving_variance
        , %para154 : Ref[Tensor(F32)][32]    # backbone.mixed_4e.b2a.features.1.bn2d.gamma
        , %para155 : Ref[Tensor(F32)][32]    # backbone.mixed_4e.b2a.features.1.bn2d.beta
        , %para156 : Ref[Tensor(F32)][32]    # backbone.mixed_4e.b2a.features.1.bn2d.moving_mean
        , %para157 : Ref[Tensor(F32)][32]    # backbone.mixed_4e.b2a.features.1.bn2d.moving_variance
        , %para158 : Ref[Tensor(F32)][128]    # backbone.mixed_4d.b0.features.1.bn2d.gamma
        , %para159 : Ref[Tensor(F32)][128]    # backbone.mixed_4d.b0.features.1.bn2d.beta
        , %para160 : Ref[Tensor(F32)][128]    # backbone.mixed_4d.b0.features.1.bn2d.moving_mean
        , %para161 : Ref[Tensor(F32)][128]    # backbone.mixed_4d.b0.features.1.bn2d.moving_variance
        , %para162 : Ref[Tensor(F32)][256]    # backbone.mixed_4d.b1b.features.1.bn2d.gamma
        , %para163 : Ref[Tensor(F32)][256]    # backbone.mixed_4d.b1b.features.1.bn2d.beta
        , %para164 : Ref[Tensor(F32)][256]    # backbone.mixed_4d.b1b.features.1.bn2d.moving_mean
        , %para165 : Ref[Tensor(F32)][256]    # backbone.mixed_4d.b1b.features.1.bn2d.moving_variance
        , %para166 : Ref[Tensor(F32)][64]    # backbone.mixed_4d.b2b.features.1.bn2d.gamma
        , %para167 : Ref[Tensor(F32)][64]    # backbone.mixed_4d.b2b.features.1.bn2d.beta
        , %para168 : Ref[Tensor(F32)][64]    # backbone.mixed_4d.b2b.features.1.bn2d.moving_mean
        , %para169 : Ref[Tensor(F32)][64]    # backbone.mixed_4d.b2b.features.1.bn2d.moving_variance
        , %para170 : Ref[Tensor(F32)][64]    # backbone.mixed_4d.b3b.features.1.bn2d.gamma
        , %para171 : Ref[Tensor(F32)][64]    # backbone.mixed_4d.b3b.features.1.bn2d.beta
        , %para172 : Ref[Tensor(F32)][64]    # backbone.mixed_4d.b3b.features.1.bn2d.moving_mean
        , %para173 : Ref[Tensor(F32)][64]    # backbone.mixed_4d.b3b.features.1.bn2d.moving_variance
        , %para174 : Ref[Tensor(F32)][128]    # backbone.mixed_4d.b1a.features.1.bn2d.gamma
        , %para175 : Ref[Tensor(F32)][128]    # backbone.mixed_4d.b1a.features.1.bn2d.beta
        , %para176 : Ref[Tensor(F32)][128]    # backbone.mixed_4d.b1a.features.1.bn2d.moving_mean
        , %para177 : Ref[Tensor(F32)][128]    # backbone.mixed_4d.b1a.features.1.bn2d.moving_variance
        , %para178 : Ref[Tensor(F32)][24]    # backbone.mixed_4d.b2a.features.1.bn2d.gamma
        , %para179 : Ref[Tensor(F32)][24]    # backbone.mixed_4d.b2a.features.1.bn2d.beta
        , %para180 : Ref[Tensor(F32)][24]    # backbone.mixed_4d.b2a.features.1.bn2d.moving_mean
        , %para181 : Ref[Tensor(F32)][24]    # backbone.mixed_4d.b2a.features.1.bn2d.moving_variance
        , %para182 : Ref[Tensor(F32)][160]    # backbone.mixed_4c.b0.features.1.bn2d.gamma
        , %para183 : Ref[Tensor(F32)][160]    # backbone.mixed_4c.b0.features.1.bn2d.beta
        , %para184 : Ref[Tensor(F32)][160]    # backbone.mixed_4c.b0.features.1.bn2d.moving_mean
        , %para185 : Ref[Tensor(F32)][160]    # backbone.mixed_4c.b0.features.1.bn2d.moving_variance
        , %para186 : Ref[Tensor(F32)][224]    # backbone.mixed_4c.b1b.features.1.bn2d.gamma
        , %para187 : Ref[Tensor(F32)][224]    # backbone.mixed_4c.b1b.features.1.bn2d.beta
        , %para188 : Ref[Tensor(F32)][224]    # backbone.mixed_4c.b1b.features.1.bn2d.moving_mean
        , %para189 : Ref[Tensor(F32)][224]    # backbone.mixed_4c.b1b.features.1.bn2d.moving_variance
        , %para190 : Ref[Tensor(F32)][64]    # backbone.mixed_4c.b2b.features.1.bn2d.gamma
        , %para191 : Ref[Tensor(F32)][64]    # backbone.mixed_4c.b2b.features.1.bn2d.beta
        , %para192 : Ref[Tensor(F32)][64]    # backbone.mixed_4c.b2b.features.1.bn2d.moving_mean
        , %para193 : Ref[Tensor(F32)][64]    # backbone.mixed_4c.b2b.features.1.bn2d.moving_variance
        , %para194 : Ref[Tensor(F32)][64]    # backbone.mixed_4c.b3b.features.1.bn2d.gamma
        , %para195 : Ref[Tensor(F32)][64]    # backbone.mixed_4c.b3b.features.1.bn2d.beta
        , %para196 : Ref[Tensor(F32)][64]    # backbone.mixed_4c.b3b.features.1.bn2d.moving_mean
        , %para197 : Ref[Tensor(F32)][64]    # backbone.mixed_4c.b3b.features.1.bn2d.moving_variance
        , %para198 : Ref[Tensor(F32)][112]    # backbone.mixed_4c.b1a.features.1.bn2d.gamma
        , %para199 : Ref[Tensor(F32)][112]    # backbone.mixed_4c.b1a.features.1.bn2d.beta
        , %para200 : Ref[Tensor(F32)][112]    # backbone.mixed_4c.b1a.features.1.bn2d.moving_mean
        , %para201 : Ref[Tensor(F32)][112]    # backbone.mixed_4c.b1a.features.1.bn2d.moving_variance
        , %para202 : Ref[Tensor(F32)][24]    # backbone.mixed_4c.b2a.features.1.bn2d.gamma
        , %para203 : Ref[Tensor(F32)][24]    # backbone.mixed_4c.b2a.features.1.bn2d.beta
        , %para204 : Ref[Tensor(F32)][24]    # backbone.mixed_4c.b2a.features.1.bn2d.moving_mean
        , %para205 : Ref[Tensor(F32)][24]    # backbone.mixed_4c.b2a.features.1.bn2d.moving_variance
        , %para206 : Ref[Tensor(F32)][192]    # backbone.mixed_4b.b0.features.1.bn2d.gamma
        , %para207 : Ref[Tensor(F32)][192]    # backbone.mixed_4b.b0.features.1.bn2d.beta
        , %para208 : Ref[Tensor(F32)][192]    # backbone.mixed_4b.b0.features.1.bn2d.moving_mean
        , %para209 : Ref[Tensor(F32)][192]    # backbone.mixed_4b.b0.features.1.bn2d.moving_variance
        , %para210 : Ref[Tensor(F32)][208]    # backbone.mixed_4b.b1b.features.1.bn2d.gamma
        , %para211 : Ref[Tensor(F32)][208]    # backbone.mixed_4b.b1b.features.1.bn2d.beta
        , %para212 : Ref[Tensor(F32)][208]    # backbone.mixed_4b.b1b.features.1.bn2d.moving_mean
        , %para213 : Ref[Tensor(F32)][208]    # backbone.mixed_4b.b1b.features.1.bn2d.moving_variance
        , %para214 : Ref[Tensor(F32)][48]    # backbone.mixed_4b.b2b.features.1.bn2d.gamma
        , %para215 : Ref[Tensor(F32)][48]    # backbone.mixed_4b.b2b.features.1.bn2d.beta
        , %para216 : Ref[Tensor(F32)][48]    # backbone.mixed_4b.b2b.features.1.bn2d.moving_mean
        , %para217 : Ref[Tensor(F32)][48]    # backbone.mixed_4b.b2b.features.1.bn2d.moving_variance
        , %para218 : Ref[Tensor(F32)][64]    # backbone.mixed_4b.b3b.features.1.bn2d.gamma
        , %para219 : Ref[Tensor(F32)][64]    # backbone.mixed_4b.b3b.features.1.bn2d.beta
        , %para220 : Ref[Tensor(F32)][64]    # backbone.mixed_4b.b3b.features.1.bn2d.moving_mean
        , %para221 : Ref[Tensor(F32)][64]    # backbone.mixed_4b.b3b.features.1.bn2d.moving_variance
        , %para222 : Ref[Tensor(F32)][96]    # backbone.mixed_4b.b1a.features.1.bn2d.gamma
        , %para223 : Ref[Tensor(F32)][96]    # backbone.mixed_4b.b1a.features.1.bn2d.beta
        , %para224 : Ref[Tensor(F32)][96]    # backbone.mixed_4b.b1a.features.1.bn2d.moving_mean
        , %para225 : Ref[Tensor(F32)][96]    # backbone.mixed_4b.b1a.features.1.bn2d.moving_variance
        , %para226 : Ref[Tensor(F32)][16]    # backbone.mixed_4b.b2a.features.1.bn2d.gamma
        , %para227 : Ref[Tensor(F32)][16]    # backbone.mixed_4b.b2a.features.1.bn2d.beta
        , %para228 : Ref[Tensor(F32)][16]    # backbone.mixed_4b.b2a.features.1.bn2d.moving_mean
        , %para229 : Ref[Tensor(F32)][16]    # backbone.mixed_4b.b2a.features.1.bn2d.moving_variance
        , %para230 : Ref[Tensor(F32)][192]    # backbone.conv3d_2c_3x3.features.1.bn2d.gamma
        , %para231 : Ref[Tensor(F32)][192]    # backbone.conv3d_2c_3x3.features.1.bn2d.beta
        , %para232 : Ref[Tensor(F32)][192]    # backbone.conv3d_2c_3x3.features.1.bn2d.moving_mean
        , %para233 : Ref[Tensor(F32)][192]    # backbone.conv3d_2c_3x3.features.1.bn2d.moving_variance
        , %para234 : Ref[Tensor(F32)][128]    # backbone.mixed_3c.b0.features.1.bn2d.gamma
        , %para235 : Ref[Tensor(F32)][128]    # backbone.mixed_3c.b0.features.1.bn2d.beta
        , %para236 : Ref[Tensor(F32)][128]    # backbone.mixed_3c.b0.features.1.bn2d.moving_mean
        , %para237 : Ref[Tensor(F32)][128]    # backbone.mixed_3c.b0.features.1.bn2d.moving_variance
        , %para238 : Ref[Tensor(F32)][192]    # backbone.mixed_3c.b1b.features.1.bn2d.gamma
        , %para239 : Ref[Tensor(F32)][192]    # backbone.mixed_3c.b1b.features.1.bn2d.beta
        , %para240 : Ref[Tensor(F32)][192]    # backbone.mixed_3c.b1b.features.1.bn2d.moving_mean
        , %para241 : Ref[Tensor(F32)][192]    # backbone.mixed_3c.b1b.features.1.bn2d.moving_variance
        , %para242 : Ref[Tensor(F32)][96]    # backbone.mixed_3c.b2b.features.1.bn2d.gamma
        , %para243 : Ref[Tensor(F32)][96]    # backbone.mixed_3c.b2b.features.1.bn2d.beta
        , %para244 : Ref[Tensor(F32)][96]    # backbone.mixed_3c.b2b.features.1.bn2d.moving_mean
        , %para245 : Ref[Tensor(F32)][96]    # backbone.mixed_3c.b2b.features.1.bn2d.moving_variance
        , %para246 : Ref[Tensor(F32)][64]    # backbone.mixed_3c.b3b.features.1.bn2d.gamma
        , %para247 : Ref[Tensor(F32)][64]    # backbone.mixed_3c.b3b.features.1.bn2d.beta
        , %para248 : Ref[Tensor(F32)][64]    # backbone.mixed_3c.b3b.features.1.bn2d.moving_mean
        , %para249 : Ref[Tensor(F32)][64]    # backbone.mixed_3c.b3b.features.1.bn2d.moving_variance
        , %para250 : Ref[Tensor(F32)][64]    # backbone.conv3d_2b_1x1.features.1.bn2d.gamma
        , %para251 : Ref[Tensor(F32)][64]    # backbone.conv3d_2b_1x1.features.1.bn2d.beta
        , %para252 : Ref[Tensor(F32)][64]    # backbone.conv3d_2b_1x1.features.1.bn2d.moving_mean
        , %para253 : Ref[Tensor(F32)][64]    # backbone.conv3d_2b_1x1.features.1.bn2d.moving_variance
        , %para254 : Ref[Tensor(F32)][128]    # backbone.mixed_3c.b1a.features.1.bn2d.gamma
        , %para255 : Ref[Tensor(F32)][128]    # backbone.mixed_3c.b1a.features.1.bn2d.beta
        , %para256 : Ref[Tensor(F32)][128]    # backbone.mixed_3c.b1a.features.1.bn2d.moving_mean
        , %para257 : Ref[Tensor(F32)][128]    # backbone.mixed_3c.b1a.features.1.bn2d.moving_variance
        , %para258 : Ref[Tensor(F32)][32]    # backbone.mixed_3c.b2a.features.1.bn2d.gamma
        , %para259 : Ref[Tensor(F32)][32]    # backbone.mixed_3c.b2a.features.1.bn2d.beta
        , %para260 : Ref[Tensor(F32)][32]    # backbone.mixed_3c.b2a.features.1.bn2d.moving_mean
        , %para261 : Ref[Tensor(F32)][32]    # backbone.mixed_3c.b2a.features.1.bn2d.moving_variance
        , %para262 : Ref[Tensor(F32)][64]    # backbone.mixed_3b.b0.features.1.bn2d.gamma
        , %para263 : Ref[Tensor(F32)][64]    # backbone.mixed_3b.b0.features.1.bn2d.beta
        , %para264 : Ref[Tensor(F32)][64]    # backbone.mixed_3b.b0.features.1.bn2d.moving_mean
        , %para265 : Ref[Tensor(F32)][64]    # backbone.mixed_3b.b0.features.1.bn2d.moving_variance
        , %para266 : Ref[Tensor(F32)][128]    # backbone.mixed_3b.b1b.features.1.bn2d.gamma
        , %para267 : Ref[Tensor(F32)][128]    # backbone.mixed_3b.b1b.features.1.bn2d.beta
        , %para268 : Ref[Tensor(F32)][128]    # backbone.mixed_3b.b1b.features.1.bn2d.moving_mean
        , %para269 : Ref[Tensor(F32)][128]    # backbone.mixed_3b.b1b.features.1.bn2d.moving_variance
        , %para270 : Ref[Tensor(F32)][32]    # backbone.mixed_3b.b2b.features.1.bn2d.gamma
        , %para271 : Ref[Tensor(F32)][32]    # backbone.mixed_3b.b2b.features.1.bn2d.beta
        , %para272 : Ref[Tensor(F32)][32]    # backbone.mixed_3b.b2b.features.1.bn2d.moving_mean
        , %para273 : Ref[Tensor(F32)][32]    # backbone.mixed_3b.b2b.features.1.bn2d.moving_variance
        , %para274 : Ref[Tensor(F32)][32]    # backbone.mixed_3b.b3b.features.1.bn2d.gamma
        , %para275 : Ref[Tensor(F32)][32]    # backbone.mixed_3b.b3b.features.1.bn2d.beta
        , %para276 : Ref[Tensor(F32)][32]    # backbone.mixed_3b.b3b.features.1.bn2d.moving_mean
        , %para277 : Ref[Tensor(F32)][32]    # backbone.mixed_3b.b3b.features.1.bn2d.moving_variance
        , %para278 : Ref[Tensor(F32)][96]    # backbone.mixed_3b.b1a.features.1.bn2d.gamma
        , %para279 : Ref[Tensor(F32)][96]    # backbone.mixed_3b.b1a.features.1.bn2d.beta
        , %para280 : Ref[Tensor(F32)][96]    # backbone.mixed_3b.b1a.features.1.bn2d.moving_mean
        , %para281 : Ref[Tensor(F32)][96]    # backbone.mixed_3b.b1a.features.1.bn2d.moving_variance
        , %para282 : Ref[Tensor(F32)][16]    # backbone.mixed_3b.b2a.features.1.bn2d.gamma
        , %para283 : Ref[Tensor(F32)][16]    # backbone.mixed_3b.b2a.features.1.bn2d.beta
        , %para284 : Ref[Tensor(F32)][16]    # backbone.mixed_3b.b2a.features.1.bn2d.moving_mean
        , %para285 : Ref[Tensor(F32)][16]    # backbone.mixed_3b.b2a.features.1.bn2d.moving_variance
        , %para286 : Ref[Tensor(F32)][64]    # backbone.conv3d_1a_7x7.features.1.bn2d.gamma
        , %para287 : Ref[Tensor(F32)][64]    # backbone.conv3d_1a_7x7.features.1.bn2d.beta
        , %para288 : Ref[Tensor(F32)][64]    # backbone.conv3d_1a_7x7.features.1.bn2d.moving_mean
        , %para289 : Ref[Tensor(F32)][64]    # backbone.conv3d_1a_7x7.features.1.bn2d.moving_variance
    ) {

#------------------------> 0
    %1 = FuncGraph::fg_35(%para1, %para2)    #(Tensor(F32)[16, 3, 64, 224, 224], Tensor(I64)[16])    # fg_35=construct.35 #scope: Default
#[CNode]47
    Primitive::Return{prim_type=1}(%1)    #(Undefined) #scope: Default
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(682)/        if self.add_cast_fp32:/#[CNode]48
}
# order:
#   1: construct_wrapper.1:[CNode]47{[0]: ValueNode<FuncGraph> construct.35, [1]: data, [2]: label}
#   2: construct_wrapper.1:[CNode]48{[0]: ValueNode<Primitive> Return, [1]: [CNode]47}


# [No.2] construct.35
# In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(680)/    def construct(self, data, label):/
funcgraph fg_35[fg_1](
        %para290 : Tensor(F32)[16, 3, 64, 224, 224]    # data
        , %para291 : Tensor(I64)[16]    # label
    ) {
    %1 : Bool = FuncGraph::fg_49(Bool(0))    #(Bool)    # fg_49=bool_.49 #scope: Default
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(682)/        if self.add_cast_fp32:/#[CNode]50
    %2 : Func = Primitive::Switch{prim_type=1}(%1, FuncGraph::fg_51, FuncGraph::fg_36)    #(Bool, Func, Func)    # fg_51=✓construct.51, fg_36=✗construct.36 #scope: Default
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(682)/        if self.add_cast_fp32:/#[CNode]52

#------------------------> 1
    %3 = %2() #scope: Default
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(682)/        if self.add_cast_fp32:/#[CNode]53
    %4 = Primitive::TupleGetItem{prim_type=1}(%3, I64(0))    #(Undefined, Undefined) #scope: Default
#[CNode]54
    %5 = Primitive::TupleGetItem{prim_type=1}(%3, I64(1))    #(Undefined, Undefined) #scope: Default
#[CNode]55
    %6 = FuncGraph::fg_56(%4, %5)    #(Undefined, Undefined)    # fg_56=↓construct.56 #scope: Default
#[CNode]57
    Primitive::Return{prim_type=1}(%6)    #(Undefined) #scope: Default
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(682)/        if self.add_cast_fp32:/#[CNode]58
}
# order:
#   1: construct.35:outputs{[0]: ValueNode<FuncGraph> construct.37, [1]: data}
#   2: construct.35:[CNode]50{[0]: ValueNode<FuncGraph> bool_.49, [1]: ValueNode<BoolImm> false}
#   3: construct.35:[CNode]52{[0]: ValueNode<Primitive> Switch, [1]: [CNode]50, [2]: ValueNode<FuncGraph> ✓construct.51, [3]: ValueNode<FuncGraph> ✗construct.36}
#   4: construct.35:[CNode]53{[0]: [CNode]52}
#   5: construct.35:[CNode]57{[0]: ValueNode<FuncGraph> ↓construct.56, [1]: [CNode]54, [2]: [CNode]55}
#   6: construct.35:[CNode]58{[0]: ValueNode<Primitive> Return, [1]: [CNode]57}
#   7: construct.35:[CNode]54{[0]: ValueNode<Primitive> TupleGetItem, [1]: [CNode]53, [2]: ValueNode<Int64Imm> 0}
#   8: construct.35:[CNode]55{[0]: ValueNode<Primitive> TupleGetItem, [1]: [CNode]53, [2]: ValueNode<Int64Imm> 1}


# [No.3] ✗construct.36
# In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(682)/        if self.add_cast_fp32:/
funcgraph fg_36[fg_35](
) {

#------------------------> 2
    %1 = $(construct.35):FuncGraph::fg_37(%para290)    #(Tensor(F32)[16, 3, 64, 224, 224])    # fg_37=construct.37 #scope: Default
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(681)/        outputs = self._network(data)/#outputs
    %2 = Primitive::MakeTuple{prim_type=1}(%1, %para291)    #(Undefined, Tensor(I64)[16]) #scope: Default
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(682)/        if self.add_cast_fp32:/#[CNode]59
    Primitive::Return{prim_type=1}(%2)    #(Undefined) #scope: Default
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(682)/        if self.add_cast_fp32:/#[CNode]60
}
# order:
#   1: ✗construct.36:[CNode]59{[0]: ValueNode<Primitive> MakeTuple, [1]: outputs, [2]: label}
#   2: ✗construct.36:[CNode]60{[0]: ValueNode<Primitive> Return, [1]: [CNode]59}


# [No.4] construct.37
# In file /home/zhengs/i3d_mindspore-main/src/models/i3d.py(309)/    def construct(self, x):/
funcgraph fg_37[fg_1](
        %para292 : Tensor(F32)[16, 3, 64, 224, 224]    # x
    ) {
    %1 : Tensor(F32)[16, 1024, 8, 7, 7] = FuncGraph::fg_61(%para292)    #(Tensor(F32)[16, 3, 64, 224, 224])    # fg_61=construct.61 #scope: Default/_network-I3D
      # In file /home/zhengs/i3d_mindspore-main/src/models/i3d.py(310)/        x = self.backbone(x)/#x
    %2 : Tensor(F32)[1, 1, 1, 1, 1] = DoSignaturePrimitive::S-Prim-ReduceMean{prim_type=1}[output_names=["y"], keep_dims=Bool(1), input_names=["input_x", "axis"]](%1)    #(Tensor(F32)[16, 1024, 8, 7, 7]) #scope: Default/_network-I3D
      # In file /home/zhengs/i3d_mindspore-main/src/models/i3d.py(311)/        x = self.neck(x)/#x

#------------------------> 3
    %3 = FuncGraph::fg_38(%2)    #(Tensor(F32)[1, 1, 1, 1, 1])    # fg_38=construct.38 #scope: Default/_network-I3D
      # In file /home/zhengs/i3d_mindspore-main/src/models/i3d.py(312)/        x = self.head(x)/#x
    Primitive::Return{prim_type=1}(%3)    #(Undefined) #scope: Default/_network-I3D
      # In file /home/zhengs/i3d_mindspore-main/src/models/i3d.py(314)/        return x/#[CNode]62
}
# order:
#   1: construct.37:x{[0]: ValueNode<FuncGraph> construct.61, [1]: x}
#   2: construct.37:x{[0]: ValueNode<DoSignaturePrimitive> S-Prim-ReduceMean, [1]: x}
#   3: construct.37:x{[0]: ValueNode<FuncGraph> construct.38, [1]: x}
#   4: construct.37:[CNode]62{[0]: ValueNode<Primitive> Return, [1]: x}


# [No.5] construct.38
# In file /home/zhengs/i3d_mindspore-main/src/models/i3d.py(243)/    def construct(self, x):/
funcgraph fg_38[fg_1](
        %para293 : Tensor(F32)[1, 1, 1, 1, 1]    # x
    ) {
    %1 : Tensor(F32)[1, 1, 1, 1, 1] = FuncGraph::fg_63(%para293)    #(Tensor(F32)[1, 1, 1, 1, 1])    # fg_63=construct.63 #scope: Default/_network-I3D/head-I3dHead
      # In file /home/zhengs/i3d_mindspore-main/src/models/i3d.py(244)/        x = self.logits(self.dropout(x))/#[CNode]64

#------------------------> 4
    %2 = FuncGraph::fg_39(%1)    #(Tensor(F32)[1, 1, 1, 1, 1])    # fg_39=construct.39 #scope: Default/_network-I3D/head-I3dHead
      # In file /home/zhengs/i3d_mindspore-main/src/models/i3d.py(244)/        x = self.logits(self.dropout(x))/#x
    %3 = DoSignaturePrimitive::S-Prim-Squeeze{prim_type=1}[output_names=["output"], input_names=["x"], axis=(I64(3))](%2)    #(Undefined) #scope: Default/_network-I3D/head-I3dHead
      # In file /home/zhengs/i3d_mindspore-main/src/models/i3d.py(245)/        x = self.squeeze(self.squeeze(x))/#[CNode]65
    %4 = DoSignaturePrimitive::S-Prim-Squeeze{prim_type=1}[output_names=["output"], input_names=["x"], axis=(I64(3))](%3)    #(Undefined) #scope: Default/_network-I3D/head-I3dHead
      # In file /home/zhengs/i3d_mindspore-main/src/models/i3d.py(245)/        x = self.squeeze(self.squeeze(x))/#x
    %5 = DoSignaturePrimitive::S-Prim-ReduceMean{prim_type=1}[output_names=["y"], keep_dims=Bool(0), input_names=["input_x", "axis"]](%4, I64(2))    #(Undefined, Undefined) #scope: Default/_network-I3D/head-I3dHead
      # In file /home/zhengs/i3d_mindspore-main/src/models/i3d.py(246)/        x = self.mean_op(x, 2)/#x
    Primitive::Return{prim_type=1}(%5)    #(Undefined) #scope: Default/_network-I3D/head-I3dHead
      # In file /home/zhengs/i3d_mindspore-main/src/models/i3d.py(247)/        return x/#[CNode]66
}
# order:
#   1: construct.38:[CNode]64{[0]: ValueNode<FuncGraph> construct.63, [1]: x}
#   2: construct.38:x{[0]: ValueNode<FuncGraph> construct.39, [1]: [CNode]64}
#   3: construct.38:[CNode]65{[0]: ValueNode<DoSignaturePrimitive> S-Prim-Squeeze, [1]: x}
#   4: construct.38:x{[0]: ValueNode<DoSignaturePrimitive> S-Prim-Squeeze, [1]: [CNode]65}
#   5: construct.38:x{[0]: ValueNode<DoSignaturePrimitive> S-Prim-ReduceMean, [1]: x, [2]: ValueNode<Int64Imm> 2}
#   6: construct.38:[CNode]66{[0]: ValueNode<Primitive> Return, [1]: x}


# [No.6] construct.39
# In file /home/zhengs/i3d_mindspore-main/src/models/layers/unit3d.py(100)/    def construct(self, x):/
funcgraph fg_39[fg_1](
        %para294 : Tensor(F32)[1, 1, 1, 1, 1]    # x
    ) {
    %1 : Bool = FuncGraph::fg_49(None)    #(NoneType)    # fg_49=bool_.49 #scope: Default/_network-I3D/head-I3dHead/logits-Unit3D
      # In file /home/zhengs/i3d_mindspore-main/src/models/layers/unit3d.py(103)/        if self.pooling:/#[CNode]67
    %2 : Func = Primitive::Switch{prim_type=1}(%1, FuncGraph::fg_68, FuncGraph::fg_40)    #(Bool, Func, Func)    # fg_68=✓construct.68, fg_40=✗construct.40 #scope: Default/_network-I3D/head-I3dHead/logits-Unit3D
      # In file /home/zhengs/i3d_mindspore-main/src/models/layers/unit3d.py(103)/        if self.pooling:/#[CNode]69

#------------------------> 5
    %3 = %2() #scope: Default/_network-I3D/head-I3dHead/logits-Unit3D
      # In file /home/zhengs/i3d_mindspore-main/src/models/layers/unit3d.py(103)/        if self.pooling:/#[CNode]70
    %4 = FuncGraph::fg_71(%3)    #(Undefined)    # fg_71=↓construct.71 #scope: Default/_network-I3D/head-I3dHead
      # In file /home/zhengs/i3d_mindspore-main/src/models/i3d.py(244)/        x = self.logits(self.dropout(x))/#[CNode]72
    Primitive::Return{prim_type=1}(%4)    #(Undefined) #scope: Default/_network-I3D/head-I3dHead/logits-Unit3D
      # In file /home/zhengs/i3d_mindspore-main/src/models/layers/unit3d.py(103)/        if self.pooling:/#[CNode]73
}
# order:
#   1: construct.39:output{[0]: ValueNode<FuncGraph> construct.41, [1]: x}
#   2: construct.39:[CNode]67{[0]: ValueNode<FuncGraph> bool_.49, [1]: ValueNode<None> None}
#   3: construct.39:[CNode]69{[0]: ValueNode<Primitive> Switch, [1]: [CNode]67, [2]: ValueNode<FuncGraph> ✓construct.68, [3]: ValueNode<FuncGraph> ✗construct.40}
#   4: construct.39:[CNode]70{[0]: [CNode]69}
#   5: construct.39:[CNode]72{[0]: ValueNode<FuncGraph> ↓construct.71, [1]: [CNode]70}
#   6: construct.39:[CNode]73{[0]: ValueNode<Primitive> Return, [1]: [CNode]72}


# [No.7] ✗construct.40
# In file /home/zhengs/i3d_mindspore-main/src/models/layers/unit3d.py(103)/        if self.pooling:/
funcgraph fg_40[fg_39](
) {

#------------------------> 6
    %1 = $(construct.39):FuncGraph::fg_41(%para294)    #(Tensor(F32)[1, 1, 1, 1, 1])    # fg_41=construct.41 #scope: Default/_network-I3D/head-I3dHead/logits-Unit3D
      # In file /home/zhengs/i3d_mindspore-main/src/models/layers/unit3d.py(102)/        output = self.features(x)/#output
    Primitive::Return{prim_type=1}(%1)    #(Undefined) #scope: Default/_network-I3D/head-I3dHead/logits-Unit3D
      # In file /home/zhengs/i3d_mindspore-main/src/models/layers/unit3d.py(103)/        if self.pooling:/#[CNode]74
}
# order:
#   1: ✗construct.40:[CNode]74{[0]: ValueNode<Primitive> Return, [1]: output}


# [No.8] construct.41
# In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/container.py(274)/    def construct(self, input_data):/
funcgraph fg_41[fg_1](
        %para295 : Tensor(F32)[1, 1, 1, 1, 1]    # input_data
    ) {

#------------------------> 7
    %1 = FuncGraph::fg_42(I64(0), %para295)    #(I64, Tensor(F32)[1, 1, 1, 1, 1])    # fg_42=⤾construct.42 #scope: Default/_network-I3D/head-I3dHead/logits-Unit3D/features-SequentialCell
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/container.py(275)/        for cell in self.cell_list:/#[CNode]75
    Primitive::Return{prim_type=1}(%1)    #(Undefined) #scope: Default/_network-I3D/head-I3dHead/logits-Unit3D/features-SequentialCell
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/container.py(275)/        for cell in self.cell_list:/#[CNode]76
}
# order:
#   1: construct.41:[CNode]77{[0]: ValueNode<FuncGraph> ms_len.78, [1]: [CNode]79}
#   2: construct.41:[CNode]75{[0]: ValueNode<FuncGraph> ⤾construct.42, [1]: ValueNode<Int64Imm> 0, [2]: input_data}
#   3: construct.41:[CNode]76{[0]: ValueNode<Primitive> Return, [1]: [CNode]75}


# [No.9] ⤾construct.42
# In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/container.py(275)/        for cell in self.cell_list:/
funcgraph fg_42[fg_41](
        %para296 : I64    # @[CNode]43
        , %para297 : Tensor(F32)[1, 1, 1, 1, 1]    # Φinput_data
    ) {
    %1 : $(construct.41):Tuple[Func] = Primitive::MakeTuple{prim_type=1}(FuncGraph::fg_45)    #(Func)    # fg_45=construct.45 #scope: Default/_network-I3D/head-I3dHead/logits-Unit3D/features-SequentialCell
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/container.py(275)/        for cell in self.cell_list:/#[CNode]79
    %2 : $(construct.41):I64 = FuncGraph::fg_78(%1)    #(Tuple[Func])    # fg_78=ms_len.78 #scope: Default/_network-I3D/head-I3dHead/logits-Unit3D/features-SequentialCell
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/container.py(275)/        for cell in self.cell_list:/#[CNode]77
    %3 : Bool = MultitypeFuncGraph::less{(Tensor, Number), (Number, Tensor), (Number, Number), (Tensor, Tensor)}(%para296, %2)    #(I64, I64) #scope: Default/_network-I3D/head-I3dHead/logits-Unit3D/features-SequentialCell
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/container.py(275)/        for cell in self.cell_list:/#[CNode]80
    %4 : Func = Primitive::Switch{prim_type=1}(%3, FuncGraph::fg_44, FuncGraph::fg_81)    #(Bool, Func, Func)    # fg_44=⥁construct.44, fg_81=↓construct.81 #scope: Default/_network-I3D/head-I3dHead/logits-Unit3D/features-SequentialCell
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/container.py(275)/        for cell in self.cell_list:/#[CNode]82

#------------------------> 8
    %5 = %4() #scope: Default/_network-I3D/head-I3dHead/logits-Unit3D/features-SequentialCell
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/container.py(275)/        for cell in self.cell_list:/#[CNode]83
    Primitive::Return{prim_type=1}(%5)    #(Undefined) #scope: Default/_network-I3D/head-I3dHead/logits-Unit3D/features-SequentialCell
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/container.py(275)/        for cell in self.cell_list:/#[CNode]84
}
# order:
#   1: ⤾construct.42:[CNode]80{[0]: ValueNode<MultitypeFuncGraph> less.85, [1]: @[CNode]43, [2]: [CNode]77}
#   2: ⤾construct.42:[CNode]82{[0]: ValueNode<Primitive> Switch, [1]: [CNode]80, [2]: ValueNode<FuncGraph> ⥁construct.44, [3]: ValueNode<FuncGraph> ↓construct.81}
#   3: ⤾construct.42:[CNode]83{[0]: [CNode]82}
#   4: ⤾construct.42:[CNode]84{[0]: ValueNode<Primitive> Return, [1]: [CNode]83}


# [No.10] ⥁construct.44
# In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/container.py(275)/        for cell in self.cell_list:/
funcgraph fg_44[fg_42](
) {
    %1 : I64 = MultitypeFuncGraph::add{(Tuple, Tuple), (RowTensor, Tensor), (Tensor, Tensor), (List, List), (Tensor, List), (List, Tensor), (String, String), (Tuple, Tensor), (NoneType, NoneType), (Number, Number), (Number, Tensor), (Tensor, Number), (Tensor, Tuple)}(%para296, I64(1))    #(I64, I64) #scope: Default/_network-I3D/head-I3dHead/logits-Unit3D/features-SequentialCell
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/container.py(275)/        for cell in self.cell_list:/#[CNode]43
    %2 : I64 = Primitive::stop_gradient{prim_type=1}(%1)    #(I64) #scope: Default/_network-I3D/head-I3dHead/logits-Unit3D/features-SequentialCell
      # In file /home/zhengs/i3d_mindspore-main/src/models/layers/unit3d.py(102)/        output = self.features(x)/#[CNode]86
    %3 : $(construct.41):Tuple[Func] = Primitive::MakeTuple{prim_type=1}(FuncGraph::fg_45)    #(Func)    # fg_45=construct.45 #scope: Default/_network-I3D/head-I3dHead/logits-Unit3D/features-SequentialCell
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/container.py(275)/        for cell in self.cell_list:/#[CNode]79
    %4 : Func = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%3, %para296)    #(Tuple[Func], I64) #scope: Default/_network-I3D/head-I3dHead/logits-Unit3D/features-SequentialCell
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/container.py(275)/        for cell in self.cell_list:/#cell

#------------------------> 9
    %5 = %4(%para297)    #(Tensor(F32)[1, 1, 1, 1, 1]) #scope: Default/_network-I3D/head-I3dHead/logits-Unit3D/features-SequentialCell
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/container.py(276)/            input_data = cell(input_data)/#input_data
    %6 = FuncGraph::fg_42(%1, %5)    #(I64, Undefined)    # fg_42=⤾construct.42 #scope: Default/_network-I3D/head-I3dHead/logits-Unit3D/features-SequentialCell
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/container.py(275)/        for cell in self.cell_list:/#[CNode]87
    %7 = Primitive::Depend{prim_type=1}[side_effect_propagate=I64(1)](%6, %2)    #(Undefined, I64) #scope: Default/_network-I3D/head-I3dHead/logits-Unit3D/features-SequentialCell
      # In file /home/zhengs/i3d_mindspore-main/src/models/layers/unit3d.py(102)/        output = self.features(x)/#[CNode]88
    Primitive::Return{prim_type=1}(%7)    #(Undefined) #scope: Default/_network-I3D/head-I3dHead/logits-Unit3D/features-SequentialCell
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/container.py(275)/        for cell in self.cell_list:/#[CNode]89
}
# order:
#   1: ⥁construct.44:cell{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]79, [2]: @[CNode]43}
#   2: ⥁construct.44:[CNode]43{[0]: ValueNode<MultitypeFuncGraph> add.90, [1]: @[CNode]43, [2]: ValueNode<Int64Imm> 1}
#   3: ⥁construct.44:input_data{[0]: cell, [1]: Φinput_data}
#   4: ⥁construct.44:[CNode]87{[0]: ValueNode<FuncGraph> ⤾construct.42, [1]: [CNode]43, [2]: input_data}
#   5: ⥁construct.44:[CNode]89{[0]: ValueNode<Primitive> Return, [1]: [CNode]88}


# [No.11] construct.45
# In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/conv.py(700)/    def construct(self, x):/
funcgraph fg_45[fg_1](
        %para298 : Tensor(F32)[1, 1, 1, 1, 1]    # x
    ) {
    %1 : Tuple[I64*5] = DoSignaturePrimitive::S-Prim-Shape{prim_type=1}(%para298)    #(Tensor(F32)[1, 1, 1, 1, 1]) #scope: Default/_network-I3D/head-I3dHead/logits-Unit3D/features-SequentialCell/0-Conv3d
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/conv.py(701)/        x_shape = self.shape(x)/#x_shape
    %2 : NoneType = DoSignaturePrimitive::S-Prim-_check_input_5dims{prim_type=1}(%1, "Conv3d")    #(Tuple[I64*5], String) #scope: Default/_network-I3D/head-I3dHead/logits-Unit3D/features-SequentialCell/0-Conv3d
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/conv.py(702)/        _check_input_5dims(x_shape, self.cls_name)/#[CNode]91
    %3 : NoneType = Primitive::stop_gradient{prim_type=1}(%2)    #(NoneType) #scope: Default/_network-I3D/head-I3dHead/logits-Unit3D/features-SequentialCell/0-Conv3d
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/container.py(275)/        for cell in self.cell_list:/#[CNode]92
    %4 : Bool = FuncGraph::fg_49(Bool(1))    #(Bool)    # fg_49=bool_.49 #scope: Default/_network-I3D/head-I3dHead/logits-Unit3D/features-SequentialCell/0-Conv3d
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/conv.py(704)/        if self.has_bias:/#[CNode]93
    %5 : Func = Primitive::Switch{prim_type=1}(%4, FuncGraph::fg_46, FuncGraph::fg_94)    #(Bool, Func, Func)    # fg_46=✓construct.46, fg_94=✗construct.94 #scope: Default/_network-I3D/head-I3dHead/logits-Unit3D/features-SequentialCell/0-Conv3d
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/conv.py(704)/        if self.has_bias:/#[CNode]95

#------------------------> 10
    %6 = %5() #scope: Default/_network-I3D/head-I3dHead/logits-Unit3D/features-SequentialCell/0-Conv3d
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/conv.py(704)/        if self.has_bias:/#[CNode]96
    %7 = FuncGraph::fg_97(%6)    #(Undefined)    # fg_97=↓construct.97 #scope: Default/_network-I3D/head-I3dHead/logits-Unit3D/features-SequentialCell
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/container.py(275)/        for cell in self.cell_list:/#[CNode]98
    %8 = Primitive::Depend{prim_type=1}[side_effect_propagate=I64(1)](%7, %3)    #(Undefined, NoneType) #scope: Default/_network-I3D/head-I3dHead/logits-Unit3D/features-SequentialCell
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/container.py(275)/        for cell in self.cell_list:/#[CNode]99
    Primitive::Return{prim_type=1}(%8)    #(Undefined) #scope: Default/_network-I3D/head-I3dHead/logits-Unit3D/features-SequentialCell/0-Conv3d
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/conv.py(704)/        if self.has_bias:/#[CNode]100
}
# order:
#   1: construct.45:x_shape{[0]: ValueNode<DoSignaturePrimitive> S-Prim-Shape, [1]: x}
#   2: construct.45:[CNode]91{[0]: ValueNode<DoSignaturePrimitive> S-Prim-_check_input_5dims, [1]: x_shape, [2]: ValueNode<StringImm> Conv3d}
#   3: construct.45:output{[0]: ValueNode<DoSignaturePrimitive> S-Prim-Conv3D, [1]: x, [2]: head.logits.features.0.weight}
#   4: construct.45:[CNode]93{[0]: ValueNode<FuncGraph> bool_.49, [1]: ValueNode<BoolImm> true}
#   5: construct.45:[CNode]95{[0]: ValueNode<Primitive> Switch, [1]: [CNode]93, [2]: ValueNode<FuncGraph> ✓construct.46, [3]: ValueNode<FuncGraph> ✗construct.94}
#   6: construct.45:[CNode]96{[0]: [CNode]95}
#   7: construct.45:[CNode]98{[0]: ValueNode<FuncGraph> ↓construct.97, [1]: [CNode]96}
#   8: construct.45:[CNode]99{[0]: ValueNode<Primitive> Depend, [1]: [CNode]98, [2]: [CNode]92}
#   9: construct.45:[CNode]100{[0]: ValueNode<Primitive> Return, [1]: [CNode]99}


# [No.12] ✓construct.46
# In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/conv.py(704)/        if self.has_bias:/
funcgraph fg_46[fg_45](
) {

#------------------------> 11
    %1 = $(construct.45):DoSignaturePrimitive::S-Prim-Conv3D{prim_type=1}[kernel_size=(I64(1), I64(1), I64(1)), mode=I64(1), out_channel=I64(400), input_names=["x", "w"], pad=(I64(0), I64(0), I64(0), I64(0), I64(0), I64(0)), offset_x=I64(0), pad_mode=I64(0), format="NCDHW", groups=I64(1), stride=(I64(1), I64(1), I64(1)), dilations=(I64(1), I64(1), I64(1), I64(1), I64(1)), strides=(I64(1), I64(1), I64(1), I64(1), I64(1)), group=I64(1), dilation=(I64(1), I64(1), I64(1)), output_names=["output"]](%para298, %para4)    #(Tensor(F32)[1, 1, 1, 1, 1], Ref[Tensor(F32)][400, 1024, 1, 1, 1]) #scope: Default/_network-I3D/head-I3dHead/logits-Unit3D/features-SequentialCell/0-Conv3d
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/conv.py(703)/        output = self.conv3d(x, self.weight)/#output
    %2 = DoSignaturePrimitive::S-Prim-BiasAdd{prim_type=1}[output_names=["output"], format="NCDHW", input_names=["x", "b"]](%1, %para3)    #(Undefined, Ref[Tensor(F32)][400]) #scope: Default/_network-I3D/head-I3dHead/logits-Unit3D/features-SequentialCell/0-Conv3d
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/conv.py(705)/            output = self.bias_add(output, self.bias)/#output
    Primitive::Return{prim_type=1}(%2)    #(Undefined) #scope: Default/_network-I3D/head-I3dHead/logits-Unit3D/features-SequentialCell/0-Conv3d
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/layer/conv.py(704)/        if self.has_bias:/#[CNode]101
}
# order:
#   1: ✓construct.46:output{[0]: ValueNode<DoSignaturePrimitive> S-Prim-BiasAdd, [1]: output, [2]: head.logits.features.0.bias}
#   2: ✓construct.46:[CNode]101{[0]: ValueNode<Primitive> Return, [1]: output}


#===============================================================================
# num of function graphs in stack: 12/13 (Ignored 1 internal frames).
